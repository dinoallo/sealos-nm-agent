// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || loong64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64

package bytecount

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type bytecountTrafficEventT struct {
	Len      uint32
	Family   uint32
	Protocol uint32
	DstIp4   uint32
	SrcIp4   uint32
	SrcPort  uint32
	DstPort  uint16
	_        [2]byte
	Identity uint32
}

// loadBytecount returns the embedded CollectionSpec for bytecount.
func loadBytecount() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BytecountBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bytecount: %w", err)
	}

	return spec, err
}

// loadBytecountObjects loads bytecount and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*bytecountObjects
//	*bytecountPrograms
//	*bytecountMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBytecountObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBytecount()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bytecountSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bytecountSpecs struct {
	bytecountProgramSpecs
	bytecountMapSpecs
}

// bytecountSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bytecountProgramSpecs struct {
	EgressBytecountCustomHook  *ebpf.ProgramSpec `ebpf:"egress_bytecount_custom_hook"`
	IngressBytecountCustomHook *ebpf.ProgramSpec `ebpf:"ingress_bytecount_custom_hook"`
}

// bytecountMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bytecountMapSpecs struct {
	EgressTrafficEvents  *ebpf.MapSpec `ebpf:"egress_traffic_events"`
	IngressTrafficEvents *ebpf.MapSpec `ebpf:"ingress_traffic_events"`
}

// bytecountObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBytecountObjects or ebpf.CollectionSpec.LoadAndAssign.
type bytecountObjects struct {
	bytecountPrograms
	bytecountMaps
}

func (o *bytecountObjects) Close() error {
	return _BytecountClose(
		&o.bytecountPrograms,
		&o.bytecountMaps,
	)
}

// bytecountMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBytecountObjects or ebpf.CollectionSpec.LoadAndAssign.
type bytecountMaps struct {
	EgressTrafficEvents  *ebpf.Map `ebpf:"egress_traffic_events"`
	IngressTrafficEvents *ebpf.Map `ebpf:"ingress_traffic_events"`
}

func (m *bytecountMaps) Close() error {
	return _BytecountClose(
		m.EgressTrafficEvents,
		m.IngressTrafficEvents,
	)
}

// bytecountPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBytecountObjects or ebpf.CollectionSpec.LoadAndAssign.
type bytecountPrograms struct {
	EgressBytecountCustomHook  *ebpf.Program `ebpf:"egress_bytecount_custom_hook"`
	IngressBytecountCustomHook *ebpf.Program `ebpf:"ingress_bytecount_custom_hook"`
}

func (p *bytecountPrograms) Close() error {
	return _BytecountClose(
		p.EgressBytecountCustomHook,
		p.IngressBytecountCustomHook,
	)
}

func _BytecountClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bytecount_bpfel.o
var _BytecountBytes []byte
