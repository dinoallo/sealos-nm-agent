// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package traffic

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadLxc_traffic returns the embedded CollectionSpec for lxc_traffic.
func loadLxc_traffic() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Lxc_trafficBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load lxc_traffic: %w", err)
	}

	return spec, err
}

// loadLxc_trafficObjects loads lxc_traffic and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*lxc_trafficObjects
//	*lxc_trafficPrograms
//	*lxc_trafficMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadLxc_trafficObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadLxc_traffic()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// lxc_trafficSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type lxc_trafficSpecs struct {
	lxc_trafficProgramSpecs
	lxc_trafficMapSpecs
}

// lxc_trafficSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type lxc_trafficProgramSpecs struct {
	EgressLxcTrafficHook  *ebpf.ProgramSpec `ebpf:"egress_lxc_traffic_hook"`
	IngressLxcTrafficHook *ebpf.ProgramSpec `ebpf:"ingress_lxc_traffic_hook"`
}

// lxc_trafficMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type lxc_trafficMapSpecs struct {
	EgressLxcTrafficEvents  *ebpf.MapSpec `ebpf:"egress_lxc_traffic_events"`
	IngressLxcTrafficEvents *ebpf.MapSpec `ebpf:"ingress_lxc_traffic_events"`
}

// lxc_trafficObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadLxc_trafficObjects or ebpf.CollectionSpec.LoadAndAssign.
type lxc_trafficObjects struct {
	lxc_trafficPrograms
	lxc_trafficMaps
}

func (o *lxc_trafficObjects) Close() error {
	return _Lxc_trafficClose(
		&o.lxc_trafficPrograms,
		&o.lxc_trafficMaps,
	)
}

// lxc_trafficMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadLxc_trafficObjects or ebpf.CollectionSpec.LoadAndAssign.
type lxc_trafficMaps struct {
	EgressLxcTrafficEvents  *ebpf.Map `ebpf:"egress_lxc_traffic_events"`
	IngressLxcTrafficEvents *ebpf.Map `ebpf:"ingress_lxc_traffic_events"`
}

func (m *lxc_trafficMaps) Close() error {
	return _Lxc_trafficClose(
		m.EgressLxcTrafficEvents,
		m.IngressLxcTrafficEvents,
	)
}

// lxc_trafficPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadLxc_trafficObjects or ebpf.CollectionSpec.LoadAndAssign.
type lxc_trafficPrograms struct {
	EgressLxcTrafficHook  *ebpf.Program `ebpf:"egress_lxc_traffic_hook"`
	IngressLxcTrafficHook *ebpf.Program `ebpf:"ingress_lxc_traffic_hook"`
}

func (p *lxc_trafficPrograms) Close() error {
	return _Lxc_trafficClose(
		p.EgressLxcTrafficHook,
		p.IngressLxcTrafficHook,
	)
}

func _Lxc_trafficClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed lxc_traffic_bpfeb.o
var _Lxc_trafficBytes []byte
