// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package traffic

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadCep_traffic returns the embedded CollectionSpec for cep_traffic.
func loadCep_traffic() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Cep_trafficBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load cep_traffic: %w", err)
	}

	return spec, err
}

// loadCep_trafficObjects loads cep_traffic and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*cep_trafficObjects
//	*cep_trafficPrograms
//	*cep_trafficMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadCep_trafficObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadCep_traffic()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// cep_trafficSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type cep_trafficSpecs struct {
	cep_trafficProgramSpecs
	cep_trafficMapSpecs
}

// cep_trafficSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type cep_trafficProgramSpecs struct {
	EgressCepTrafficHook  *ebpf.ProgramSpec `ebpf:"egress_cep_traffic_hook"`
	IngressCepTrafficHook *ebpf.ProgramSpec `ebpf:"ingress_cep_traffic_hook"`
}

// cep_trafficMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type cep_trafficMapSpecs struct {
	EgressCepTrafficEvents          *ebpf.MapSpec `ebpf:"egress_cep_traffic_events"`
	EgressSubmitErrorsNotifications *ebpf.MapSpec `ebpf:"egress_submit_errors_notifications"`
	IngressCepTrafficEvents         *ebpf.MapSpec `ebpf:"ingress_cep_traffic_events"`
}

// cep_trafficObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadCep_trafficObjects or ebpf.CollectionSpec.LoadAndAssign.
type cep_trafficObjects struct {
	cep_trafficPrograms
	cep_trafficMaps
}

func (o *cep_trafficObjects) Close() error {
	return _Cep_trafficClose(
		&o.cep_trafficPrograms,
		&o.cep_trafficMaps,
	)
}

// cep_trafficMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadCep_trafficObjects or ebpf.CollectionSpec.LoadAndAssign.
type cep_trafficMaps struct {
	EgressCepTrafficEvents          *ebpf.Map `ebpf:"egress_cep_traffic_events"`
	EgressSubmitErrorsNotifications *ebpf.Map `ebpf:"egress_submit_errors_notifications"`
	IngressCepTrafficEvents         *ebpf.Map `ebpf:"ingress_cep_traffic_events"`
}

func (m *cep_trafficMaps) Close() error {
	return _Cep_trafficClose(
		m.EgressCepTrafficEvents,
		m.EgressSubmitErrorsNotifications,
		m.IngressCepTrafficEvents,
	)
}

// cep_trafficPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadCep_trafficObjects or ebpf.CollectionSpec.LoadAndAssign.
type cep_trafficPrograms struct {
	EgressCepTrafficHook  *ebpf.Program `ebpf:"egress_cep_traffic_hook"`
	IngressCepTrafficHook *ebpf.Program `ebpf:"ingress_cep_traffic_hook"`
}

func (p *cep_trafficPrograms) Close() error {
	return _Cep_trafficClose(
		p.EgressCepTrafficHook,
		p.IngressCepTrafficHook,
	)
}

func _Cep_trafficClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed cep_traffic_bpfeb.o
var _Cep_trafficBytes []byte
