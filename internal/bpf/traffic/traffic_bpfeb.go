// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64

package traffic

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type trafficEventT struct {
	Len      uint32
	Family   uint32
	Protocol uint32
	DstIp4   uint32
	SrcIp4   uint32
	DstIp6   [4]uint32
	SrcIp6   [4]uint32
	SrcPort  uint32
	DstPort  uint16
	_        [2]byte
}

// loadTraffic returns the embedded CollectionSpec for traffic.
func loadTraffic() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TrafficBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load traffic: %w", err)
	}

	return spec, err
}

// loadTrafficObjects loads traffic and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*trafficObjects
//	*trafficPrograms
//	*trafficMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTrafficObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTraffic()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// trafficSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type trafficSpecs struct {
	trafficProgramSpecs
	trafficMapSpecs
}

// trafficSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type trafficProgramSpecs struct {
	EgressTrafficHook  *ebpf.ProgramSpec `ebpf:"egress_traffic_hook"`
	IngressTrafficHook *ebpf.ProgramSpec `ebpf:"ingress_traffic_hook"`
}

// trafficMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type trafficMapSpecs struct {
	EgressTrafficEvents  *ebpf.MapSpec `ebpf:"egress_traffic_events"`
	IngressTrafficEvents *ebpf.MapSpec `ebpf:"ingress_traffic_events"`
}

// trafficObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTrafficObjects or ebpf.CollectionSpec.LoadAndAssign.
type trafficObjects struct {
	trafficPrograms
	trafficMaps
}

func (o *trafficObjects) Close() error {
	return _TrafficClose(
		&o.trafficPrograms,
		&o.trafficMaps,
	)
}

// trafficMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTrafficObjects or ebpf.CollectionSpec.LoadAndAssign.
type trafficMaps struct {
	EgressTrafficEvents  *ebpf.Map `ebpf:"egress_traffic_events"`
	IngressTrafficEvents *ebpf.Map `ebpf:"ingress_traffic_events"`
}

func (m *trafficMaps) Close() error {
	return _TrafficClose(
		m.EgressTrafficEvents,
		m.IngressTrafficEvents,
	)
}

// trafficPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTrafficObjects or ebpf.CollectionSpec.LoadAndAssign.
type trafficPrograms struct {
	EgressTrafficHook  *ebpf.Program `ebpf:"egress_traffic_hook"`
	IngressTrafficHook *ebpf.Program `ebpf:"ingress_traffic_hook"`
}

func (p *trafficPrograms) Close() error {
	return _TrafficClose(
		p.EgressTrafficHook,
		p.IngressTrafficHook,
	)
}

func _TrafficClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed traffic_bpfeb.o
var _TrafficBytes []byte
