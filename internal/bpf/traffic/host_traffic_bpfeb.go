// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package traffic

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadHost_traffic returns the embedded CollectionSpec for host_traffic.
func loadHost_traffic() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Host_trafficBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load host_traffic: %w", err)
	}

	return spec, err
}

// loadHost_trafficObjects loads host_traffic and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*host_trafficObjects
//	*host_trafficPrograms
//	*host_trafficMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadHost_trafficObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadHost_traffic()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// host_trafficSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type host_trafficSpecs struct {
	host_trafficProgramSpecs
	host_trafficMapSpecs
}

// host_trafficSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type host_trafficProgramSpecs struct {
	EgressHostTrafficHook  *ebpf.ProgramSpec `ebpf:"egress_host_traffic_hook"`
	IngressHostTrafficHook *ebpf.ProgramSpec `ebpf:"ingress_host_traffic_hook"`
}

// host_trafficMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type host_trafficMapSpecs struct {
	EgressHostTrafficEvents  *ebpf.MapSpec `ebpf:"egress_host_traffic_events"`
	IngressHostTrafficEvents *ebpf.MapSpec `ebpf:"ingress_host_traffic_events"`
}

// host_trafficObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadHost_trafficObjects or ebpf.CollectionSpec.LoadAndAssign.
type host_trafficObjects struct {
	host_trafficPrograms
	host_trafficMaps
}

func (o *host_trafficObjects) Close() error {
	return _Host_trafficClose(
		&o.host_trafficPrograms,
		&o.host_trafficMaps,
	)
}

// host_trafficMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadHost_trafficObjects or ebpf.CollectionSpec.LoadAndAssign.
type host_trafficMaps struct {
	EgressHostTrafficEvents  *ebpf.Map `ebpf:"egress_host_traffic_events"`
	IngressHostTrafficEvents *ebpf.Map `ebpf:"ingress_host_traffic_events"`
}

func (m *host_trafficMaps) Close() error {
	return _Host_trafficClose(
		m.EgressHostTrafficEvents,
		m.IngressHostTrafficEvents,
	)
}

// host_trafficPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadHost_trafficObjects or ebpf.CollectionSpec.LoadAndAssign.
type host_trafficPrograms struct {
	EgressHostTrafficHook  *ebpf.Program `ebpf:"egress_host_traffic_hook"`
	IngressHostTrafficHook *ebpf.Program `ebpf:"ingress_host_traffic_hook"`
}

func (p *host_trafficPrograms) Close() error {
	return _Host_trafficClose(
		p.EgressHostTrafficHook,
		p.IngressHostTrafficHook,
	)
}

func _Host_trafficClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed host_traffic_bpfeb.o
var _Host_trafficBytes []byte
